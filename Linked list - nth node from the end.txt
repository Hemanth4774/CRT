Linked list - nth node from the end

Write a Program to find the nth node of a list from the end. If there is no nth node print "There is no nth node in the list", otherwise print the nth node element.

Input Format

The input should be numbers (until user enters a negative value). Last line should be the value of nth node.

Constraints

1<=n<=10^7

Output Format

The output should be numbers in the list in separate line.

Sample Input 0

1
2
3
4
-1
2
Sample Output 0

3 is the nth node element in the list
Sample Input 1

1
2
3
4
-1
5
Sample Output 1

There is no nth node in the list

class node():
    def __init__(self,data):
        self.data=data
        self.next=None
class sllist():
    def __init__(self):
        self.head=self.tail=None
    
    def insert(self,data):
        n=node(data)
        if self.head==None:
            self.head=self.tail=n
        else:
            self.tail.next=n
            self.tail=n
    
    def show(self):
        if self.head==None:
            print("List is empty")
            return
        temp=self.head
        while temp!=None:
            print(temp.data)
            temp=temp.next
        
    def delete(self):
        if self.head==None:
            print("List is empty")
            return
        self.head=self.head.next
        
    def nnode(self,pos):
        if self.head==None:
            print("List is empty")
            return
        temp=self.head
        c=-1
        if pos>i:
            print("There is no nth node in the list")
        while c<pos and temp.next!=None:
            c+=1
            if c==pos:
                print(temp.data,"is the nth node element in the list")
            temp=temp.next
        
s1=sllist()
i=0
while True:
    x=int(input())
    if x>0:
        s1.insert(x)
        i+=1
    else:
        break
pos=int(input())
s1.nnode(pos)